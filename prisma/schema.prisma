// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String
  fullName String?
  email    String  @unique
  role     Role    @default(USER)

  playlists      Playlist[]
  watchLaterList WatchLaterMovie[]
  favorites      Favorite[]
  reviews        Review[]
}

model Playlist {
  id      Int     @id @default(autoincrement())
  title   String
  private Boolean @default(false)

  User   User @relation(fields: [userId], references: [id])
  userId Int

  moviesToPlaylists MovieToPlaylist[]
}

model Movie {
  id          Int    @id @default(autoincrement())
  title       String
  year        Int
  country     String
  genre       String // TODO diff, array
  director    String // TODO diff type
  cast        String // TODO diff array
  duration    Int // minutes
  age         Int // "age+"
  seasons     Int?
  description String

  rating  Float?
  reviews Review[]

  @@index([title], type: Hash)

  moviesToPlaylists MovieToPlaylist[]
  watchLaterMovies  WatchLaterMovie[]
  favorites         Favorite[]
}

model MovieToPlaylist {
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  movie      Movie    @relation(fields: [movieId], references: [id])
  playlistId Int
  movieId    Int
  movieTitle String

  @@unique([playlistId, movieId])
}

model Favorite {
  user    User  @relation(fields: [userId], references: [id])
  movie   Movie @relation(fields: [movieId], references: [id])
  userId  Int
  movieId Int
  movieTitle String

  @@unique([userId, movieId])
}

model WatchLaterMovie {
  id               Int              @id @default(autoincrement())
  watchLaterStatus WatchLaterStatus

  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model Review {
  id     Int      @id @default(autoincrement())
  rating Float
  body   String
  date   DateTime @default(now())

  User   User @relation(fields: [userId], references: [id])
  userId Int

  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
}

enum Role {
  ADMIN
  USER
}

enum WatchLaterStatus {
  WATCHED
  NOT_WATCHED
}
